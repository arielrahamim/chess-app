{"ast":null,"code":"var _classCallCheck = require(\"/home/mushrambo/projects/eks-chess/chess-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/home/mushrambo/projects/eks-chess/chess-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/home/mushrambo/projects/eks-chess/chess-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/home/mushrambo/projects/eks-chess/chess-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar transports = require(\"./transports/index\");\nvar Emitter = require(\"component-emitter\");\nvar debug = require(\"debug\")(\"engine.io-client:socket\");\nvar parser = require(\"engine.io-parser\");\nvar parseuri = require(\"parseuri\");\nvar parseqs = require(\"parseqs\");\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {}\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    }\n\n    // set on handshake\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null;\n\n    // set on heartbeat\n    _this.pingTimeoutTimer = null;\n    _this.open();\n    return _this;\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = clone(this.opts.query);\n\n      // append engine.io protocol identifier\n      query.EIO = parser.protocol;\n\n      // transport name\n      query.transport = name;\n\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new transports[name](opts);\n    }\n\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      var transport;\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        var self = this;\n        setTimeout(function () {\n          self.emit(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n      this.readyState = \"opening\";\n\n      // Retry with the next transport if the transport is disabled (jsonp: false)\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n      transport.open();\n      this.setTransport(transport);\n    }\n\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      var self = this;\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      }\n\n      // set up transport\n      this.transport = transport;\n\n      // set up transport listeners\n      transport.on(\"drain\", function () {\n        self.onDrain();\n      }).on(\"packet\", function (packet) {\n        self.onPacket(packet);\n      }).on(\"error\", function (e) {\n        self.onError(e);\n      }).on(\"close\", function () {\n        self.onClose(\"transport close\");\n      });\n    }\n\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name, {\n        probe: 1\n      });\n      var failed = false;\n      var self = this;\n      Socket.priorWebsocketSuccess = false;\n      function onTransportOpen() {\n        if (self.onlyBinaryUpgrades) {\n          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n          failed = failed || upgradeLosesBinary;\n        }\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            self.upgrading = true;\n            self.emit(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', self.transport.name);\n            self.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === self.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              self.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              self.emit(\"upgrade\", transport);\n              transport = null;\n              self.upgrading = false;\n              self.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            err.transport = transport.name;\n            self.emit(\"upgradeError\", err);\n          }\n        });\n      }\n      function freezeTransport() {\n        if (failed) return;\n\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n\n      // Handle any error that happens while probing\n      function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        self.emit(\"upgradeError\", error);\n      }\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      }\n\n      // Remove all listeners on the transport and on self\n      function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        self.removeListener(\"close\", onclose);\n        self.removeListener(\"upgrading\", onupgrade);\n      }\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api public\n     */\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emit(\"open\");\n      this.flush();\n\n      // we check for `readyState` in case an `open`\n      // listener already closed the socket\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emit(\"packet\", packet);\n\n        // Socket is live - any packet counts\n        this.emit(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emit(\"pong\");\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            err.code = packet.data;\n            this.onError(err);\n            break;\n          case \"message\":\n            this.emit(\"data\", packet.data);\n            this.emit(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} handshake obj\n     * @api private\n     */\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emit(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this2 = this;\n      clearTimeout(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = setTimeout(function () {\n        _this2.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n    }\n\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen);\n\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this.prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emit(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n        this.transport.send(this.writeBuffer);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emit(\"flush\");\n      }\n    }\n\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n\n    /**\n     * Closes the connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      function close() {\n        self.onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        self.transport.close();\n      }\n      function cleanupAndClose() {\n        self.removeListener(\"upgrade\", cleanupAndClose);\n        self.removeListener(\"upgradeError\", cleanupAndClose);\n        close();\n      }\n      function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        self.once(\"upgrade\", cleanupAndClose);\n        self.once(\"upgradeError\", cleanupAndClose);\n      }\n      return this;\n    }\n\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emit(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        var self = this;\n\n        // clear timers\n        clearTimeout(this.pingIntervalTimer);\n        clearTimeout(this.pingTimeoutTimer);\n\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n\n        // ensure transport won't stay open\n        this.transport.close();\n\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n\n        // set ready state\n        this.readyState = \"closed\";\n\n        // clear session id\n        this.id = null;\n\n        // emit close event\n        this.emit(\"close\", reason, desc);\n\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        self.writeBuffer = [];\n        self.prevBufferLen = 0;\n      }\n    }\n\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }]);\n  return Socket;\n}(Emitter);\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\nmodule.exports = Socket;","map":{"version":3,"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","_Emitter","_inherits","_super","_createSuper","uri","_this","opts","arguments","length","undefined","_classCallCheck","call","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","open","_createClass","key","value","createTransport","name","clone","EIO","transport","sid","socket","priorWebsocketSuccess","indexOf","self","setTimeout","emit","e","shift","setTransport","removeAllListeners","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","onlyBinaryUpgrades","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","close","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","i","l","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","_this2","clearTimeout","splice","writable","write","options","fn","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","pingIntervalTimer","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"sources":["/home/mushrambo/projects/eks-chess/chess-front-end/node_modules/engine.io-client/lib/socket.js"],"sourcesContent":["const transports = require(\"./transports/index\");\nconst Emitter = require(\"component-emitter\");\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\nconst parser = require(\"engine.io-parser\");\nconst parseuri = require(\"parseuri\");\nconst parseqs = require(\"parseqs\");\n\nclass Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} options\n   * @api public\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure =\n      null != opts.secure\n        ? opts.secure\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname =\n      opts.hostname ||\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port =\n      opts.port ||\n      (typeof location !== \"undefined\" && location.port\n        ? location.port\n        : this.secure\n        ? 443\n        : 80);\n\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n\n    this.opts = Object.assign(\n      {\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        jsonp: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {}\n      },\n      opts\n    );\n\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    }\n\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n\n    this.open();\n  }\n\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query);\n\n    // append engine.io protocol identifier\n    query.EIO = parser.protocol;\n\n    // transport name\n    query.transport = name;\n\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n\n    const opts = Object.assign(\n      {},\n      this.opts.transportOptions[name],\n      this.opts,\n      {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }\n    );\n\n    debug(\"options: %j\", opts);\n\n    return new transports[name](opts);\n  }\n\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (\n      this.opts.rememberUpgrade &&\n      Socket.priorWebsocketSuccess &&\n      this.transports.indexOf(\"websocket\") !== -1\n    ) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      const self = this;\n      setTimeout(function() {\n        self.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n    const self = this;\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    }\n\n    // set up transport\n    this.transport = transport;\n\n    // set up transport listeners\n    transport\n      .on(\"drain\", function() {\n        self.onDrain();\n      })\n      .on(\"packet\", function(packet) {\n        self.onPacket(packet);\n      })\n      .on(\"error\", function(e) {\n        self.onError(e);\n      })\n      .on(\"close\", function() {\n        self.onClose(\"transport close\");\n      });\n  }\n\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, { probe: 1 });\n    let failed = false;\n    const self = this;\n\n    Socket.priorWebsocketSuccess = false;\n\n    function onTransportOpen() {\n      if (self.onlyBinaryUpgrades) {\n        const upgradeLosesBinary =\n          !this.supportsBinary && self.transport.supportsBinary;\n        failed = failed || upgradeLosesBinary;\n      }\n      if (failed) return;\n\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\n      transport.once(\"packet\", function(msg) {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          self.upgrading = true;\n          self.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n          debug('pausing current transport \"%s\"', self.transport.name);\n          self.transport.pause(function() {\n            if (failed) return;\n            if (\"closed\" === self.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n\n            cleanup();\n\n            self.setTransport(transport);\n            transport.send([{ type: \"upgrade\" }]);\n            self.emit(\"upgrade\", transport);\n            transport = null;\n            self.upgrading = false;\n            self.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          self.emit(\"upgradeError\", err);\n        }\n      });\n    }\n\n    function freezeTransport() {\n      if (failed) return;\n\n      // Any callback called by transport should be ignored since now\n      failed = true;\n\n      cleanup();\n\n      transport.close();\n      transport = null;\n    }\n\n    // Handle any error that happens while probing\n    function onerror(err) {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n\n      freezeTransport();\n\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n      self.emit(\"upgradeError\", error);\n    }\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    }\n\n    // Remove all listeners on the transport and on self\n    function cleanup() {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      self.removeListener(\"close\", onclose);\n      self.removeListener(\"upgrading\", onupgrade);\n    }\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    transport.open();\n  }\n\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api public\n   */\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush();\n\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\n      \"open\" === this.readyState &&\n      this.opts.upgrade &&\n      this.transport.pause\n    ) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n      this.emit(\"packet\", packet);\n\n      // Socket is live - any packet counts\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n  }\n\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\n      \"closed\" !== this.readyState &&\n      this.transport.writable &&\n      !this.upgrading &&\n      this.writeBuffer.length\n    ) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n\n  /**\n   * Closes the connection.\n   *\n   * @api private\n   */\n  close() {\n    const self = this;\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", function() {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    function close() {\n      self.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      self.transport.close();\n    }\n\n    function cleanupAndClose() {\n      self.removeListener(\"upgrade\", cleanupAndClose);\n      self.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    }\n\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once(\"upgrade\", cleanupAndClose);\n      self.once(\"upgradeError\", cleanupAndClose);\n    }\n\n    return this;\n  }\n\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, desc) {\n    if (\n      \"opening\" === this.readyState ||\n      \"open\" === this.readyState ||\n      \"closing\" === this.readyState\n    ) {\n      debug('socket close with reason: \"%s\"', reason);\n      const self = this;\n\n      // clear timers\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer);\n\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n\n      // ensure transport won't stay open\n      this.transport.close();\n\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n\n      // set ready state\n      this.readyState = \"closed\";\n\n      // clear session id\n      this.id = null;\n\n      // emit close event\n      this.emit(\"close\", reason, desc);\n\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      self.writeBuffer = [];\n      self.prevBufferLen = 0;\n    }\n  }\n\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i]))\n        filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\nmodule.exports = Socket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}