{"ast":null,"code":"import Chess from'chess.js';var chess;var INF=99999999;var pieceValue=[];// black piece with lower case letters\npieceValue['p']=100;// pawn\npieceValue['n']=300;// knight\npieceValue['b']=300;// bishop\npieceValue['r']=500;// rook\npieceValue['q']=900;// queen\npieceValue['k']=20000;// king\n// white piece with upper case letters\npieceValue['P']=100;// pawn\npieceValue['N']=300;// knight\npieceValue['B']=300;// bishop\npieceValue['R']=500;// rook\npieceValue['Q']=900;// queen\npieceValue['K']=20000;// king\n// during evalution all pieces will also be evaluted based on their position on board.\n// this values is for white pieces.\nvar positionWeightWhite=[];positionWeightWhite['p']=[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];positionWeightWhite['n']=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];positionWeightWhite['b']=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];positionWeightWhite['r']=[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]];positionWeightWhite['q']=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];positionWeightWhite['k']=[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]];positionWeightWhite['k_end']=[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]];var positionWeightBlack=positionWeightWhite;for(var i in positionWeightBlack){for(var j=0;j<8;j++){positionWeightBlack[i][j].reverse();}positionWeightBlack[i].reverse();}var evaluteBoard=function evaluteBoard(maximizingPlayer){if(chess.in_checkmate()){// if it's checkmate then check which player got checkmate\n// if computer got checkmate then it is not desirable\n// if opponent got checkmate then it is the best position we want\nif(maximizingPlayer){return INF;}else{return-INF;}}var evalution=0;var fen=chess.fen();// from fen notation find get piece detail part.\nvar pieces=fen.split(' ')[0];// now find the position of all piece and give score accroding to postion.\nvar curx=0,cury=0;// if we are in endgame we will evalute king with little bit different values.\n// if number of pieces is low than we define this as endgame.\nvar endGame=false,pieceCnt=0;for(var _i=0;_i<pieces.length;_i++){if(pieces[_i]in pieceValue){pieceCnt++;}}if(pieceCnt<=10)endGame=true;// now we will evalute board position based on 2 things\n// 1. piece values\n// 2. piece postion values.\nfor(var _i2=0;_i2<pieces.length;_i2++){if(pieces[_i2]in pieceValue){// if it is lowercase then it is black piece.\n// else it is white pieces.\nif(pieces[_i2]>='a'&&pieces[_i2]<='z'){evalution+=pieceValue[pieces[_i2]];if(endGame&&pieces[_i2]==='k'){evalution+=positionWeightBlack['k_end'][curx][cury];}else{evalution+=positionWeightBlack[pieces[_i2]][curx][cury];}}else{evalution-=pieceValue[pieces[_i2]];if(endGame&&pieces[_i2]==='k'){evalution+=positionWeightWhite['k_end'][curx][cury];}else{evalution-=positionWeightWhite[pieces[_i2].toLowerCase()][curx][cury];}}}else{// if we encounter '/' then it measn that we reached the end of the row.\nif(pieces[_i2]==='/'){// go to the next row on chess board.\ncurx++;cury=0;}else{// if it is number then jump position on board in current row by that number.\ncury+=parseInt(pieces[_i2]);}}}return evalution;};var minimax=function minimax(depth,alpha,beta,maximizingPlayer){// if we reach the depth limit or game is over then return then evalution value for the current board position.\nif(depth===0||chess.game_over()){return[evaluteBoard(!maximizingPlayer),null];}// generate all possible moves.\nvar moves=chess.moves({verbose:true});// sort moves randomly to avoid selecting same move again and again.\nfor(var _i3=moves.length-1;_i3>0;_i3--){var _j=Math.floor(Math.random()*(_i3+1));var _ref=[moves[_j],moves[_i3]];moves[_i3]=_ref[0];moves[_j]=_ref[1];}if(maximizingPlayer){// if it is the turn of maximizing player then try to pick position with maximum evalution value.\nvar maxEvalution=-INF;var move=null;for(var _i4=0;_i4<moves.length;_i4++){chess.move(moves[_i4]);var res=minimax(depth-1,alpha,beta,!maximizingPlayer);if(maxEvalution<res[0]){maxEvalution=res[0];move=moves[_i4];}alpha=Math.max(alpha,res[0]);chess.undo();if(beta<=alpha){break;}}return[maxEvalution,move];}else{// if it is the turn of minimizing player then try to pick position with minimum evalution value.\nvar minEvalution=INF;var _move=null;for(var _i5=0;_i5<moves.length;_i5++){chess.move(moves[_i5]);var _res=minimax(depth-1,alpha,beta,!maximizingPlayer);if(minEvalution>_res[0]){minEvalution=_res[0];_move=moves[_i5];}beta=Math.min(beta,_res[0]);chess.undo();if(beta<=alpha){break;}}return[minEvalution,_move];}};/* \nold data\ndepth       milliseconds\n  1       9.725000010803342   23.674999989452772   30.530000003636815  11.014999996405095   14.455000011366792 \n  3       118.61499999940861  211.57500000845175   220.89499999128748  486.86500001349486  320.6800000043586   174.93500000273343 950.2199999988079 1114.690000002156  1316.5449999942211  2170.0399999972433  1643.1749999901513  2118.000000002212  232.4499999958789 691.5900000021793 194.4999999977881 .... then most of is around 50ms     \n  4       971.0400000039954   1037.9499999980908   1667.780000003404   2699.159999989206  1992.5700000021607   3732.140000007348  9526.230000003125 5469.129999997676  3829.830000002403   33861.92000001029   3527.0000000018626  9804.919999995036  9804.919999995036 2311.1449999996694 3807.394999996177 3014.884999996866  6488.115000000107 5849.965000001248 38767.55000000412  6834.484999999404  4239.4899999926565  4217.980000001262  6130.514999997104  6226.27499999362   11804.290000000037 \n*/export var GenerateMove=function GenerateMove(fen){chess=new Chess(fen);// depth of minimax.\nvar depth=3;// const t0 = performance.now();\nvar result=minimax(depth,-INF,INF,true);// const t1 = performance.now();\n// console.log(`Took ${t1 - t0} milliseconds`)\n// result will have 2 values\n// first one is evalution value\n// second is the move\nreturn result[1];};","map":{"version":3,"names":["Chess","chess","INF","pieceValue","positionWeightWhite","positionWeightBlack","i","j","reverse","evaluteBoard","maximizingPlayer","in_checkmate","evalution","fen","pieces","split","curx","cury","endGame","pieceCnt","length","toLowerCase","parseInt","minimax","depth","alpha","beta","game_over","moves","verbose","Math","floor","random","_ref","maxEvalution","move","res","max","undo","minEvalution","min","GenerateMove","result"],"sources":["/home/mushrambo/projects/eks-chess/chess-front-end/src/components/Utils/GenerateMove.js"],"sourcesContent":["import Chess from 'chess.js';\n\nlet chess;\n\nconst INF = 99999999;\n\nlet pieceValue = [];\n// black piece with lower case letters\npieceValue['p'] = 100; // pawn\npieceValue['n'] = 300; // knight\npieceValue['b'] = 300; // bishop\npieceValue['r'] = 500; // rook\npieceValue['q'] = 900; // queen\npieceValue['k'] = 20000; // king\n\n// white piece with upper case letters\npieceValue['P'] = 100; // pawn\npieceValue['N'] = 300; // knight\npieceValue['B'] = 300; // bishop\npieceValue['R'] = 500; // rook\npieceValue['Q'] = 900; // queen\npieceValue['K'] = 20000; // king\n\n// during evalution all pieces will also be evaluted based on their position on board.\n// this values is for white pieces.\nlet positionWeightWhite = [];\npositionWeightWhite['p'] = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [50, 50, 50, 50, 50, 50, 50, 50],\n    [10, 10, 20, 30, 30, 20, 10, 10],\n    [5, 5, 10, 25, 25, 10, 5, 5],\n    [0, 0, 0, 20, 20, 0, 0, 0],\n    [5, -5, -10, 0, 0, -10, -5, 5],\n    [5, 10, 10, -20, -20, 10, 10, 5],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n];\n\npositionWeightWhite['n'] = [\n    [-50, -40, -30, -30, -30, -30, -40, -50],\n    [-40, -20, 0, 0, 0, 0, -20, -40],\n    [-30, 0, 10, 15, 15, 10, 0, -30],\n    [-30, 5, 15, 20, 20, 15, 5, -30],\n    [-30, 0, 15, 20, 20, 15, 0, -30],\n    [-30, 5, 10, 15, 15, 10, 5, -30],\n    [-40, -20, 0, 5, 5, 0, -20, -40],\n    [-50, -40, -30, -30, -30, -30, -40, -50],\n];\n\npositionWeightWhite['b'] = [\n    [-20, -10, -10, -10, -10, -10, -10, -20],\n    [-10, 0, 0, 0, 0, 0, 0, -10],\n    [-10, 0, 5, 10, 10, 5, 0, -10],\n    [-10, 5, 5, 10, 10, 5, 5, -10],\n    [-10, 0, 10, 10, 10, 10, 0, -10],\n    [-10, 10, 10, 10, 10, 10, 10, -10],\n    [-10, 5, 0, 0, 0, 0, 5, -10],\n    [-20, -10, -10, -10, -10, -10, -10, -20],\n];\n\npositionWeightWhite['r'] = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [5, 10, 10, 10, 10, 10, 10, 5],\n    [-5, 0, 0, 0, 0, 0, 0, -5],\n    [-5, 0, 0, 0, 0, 0, 0, -5],\n    [-5, 0, 0, 0, 0, 0, 0, -5],\n    [-5, 0, 0, 0, 0, 0, 0, -5],\n    [-5, 0, 0, 0, 0, 0, 0, -5],\n    [0, 0, 0, 5, 5, 0, 0, 0],\n];\n\npositionWeightWhite['q'] = [\n    [-20, -10, -10, -5, -5, -10, -10, -20],\n    [-10, 0, 0, 0, 0, 0, 0, -10],\n    [-10, 0, 5, 5, 5, 5, 0, -10],\n    [-5, 0, 5, 5, 5, 5, 0, -5],\n    [0, 0, 5, 5, 5, 5, 0, -5],\n    [-10, 5, 5, 5, 5, 5, 0, -10],\n    [-10, 0, 5, 0, 0, 0, 0, -10],\n    [-20, -10, -10, -5, -5, -10, -10, -20],\n];\npositionWeightWhite['k'] = [\n    [-30, -40, -40, -50, -50, -40, -40, -30],\n    [-30, -40, -40, -50, -50, -40, -40, -30],\n    [-30, -40, -40, -50, -50, -40, -40, -30],\n    [-30, -40, -40, -50, -50, -40, -40, -30],\n    [-20, -30, -30, -40, -40, -30, -30, -20],\n    [-10, -20, -20, -20, -20, -20, -20, -10],\n    [20, 20, 0, 0, 0, 0, 20, 20],\n    [20, 30, 10, 0, 0, 10, 30, 20],\n];\npositionWeightWhite['k_end'] = [\n    [-50, -40, -30, -20, -20, -30, -40, -50],\n    [-30, -20, -10, 0, 0, -10, -20, -30],\n    [-30, -10, 20, 30, 30, 20, -10, -30],\n    [-30, -10, 30, 40, 40, 30, -10, -30],\n    [-30, -10, 30, 40, 40, 30, -10, -30],\n    [-30, -10, 20, 30, 30, 20, -10, -30],\n    [-30, -30, 0, 0, 0, 0, -30, -30],\n    [-50, -30, -30, -30, -30, -30, -30, -50],\n];\n\nlet positionWeightBlack = positionWeightWhite;\n\nfor (let i in positionWeightBlack) {\n    for (let j = 0; j < 8; j++) {\n        positionWeightBlack[i][j].reverse();\n    }\n    positionWeightBlack[i].reverse();\n}\n\nconst evaluteBoard = (maximizingPlayer) => {\n    if (chess.in_checkmate()) {\n        // if it's checkmate then check which player got checkmate\n        // if computer got checkmate then it is not desirable\n        // if opponent got checkmate then it is the best position we want\n        if (maximizingPlayer) {\n            return INF;\n        } else {\n            return -INF;\n        }\n    }\n\n    let evalution = 0;\n    let fen = chess.fen();\n\n    // from fen notation find get piece detail part.\n    let pieces = fen.split(' ')[0];\n\n    // now find the position of all piece and give score accroding to postion.\n    let curx = 0,\n        cury = 0;\n    // if we are in endgame we will evalute king with little bit different values.\n    // if number of pieces is low than we define this as endgame.\n    let endGame = false,\n        pieceCnt = 0;\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i] in pieceValue) {\n            pieceCnt++;\n        }\n    }\n    if (pieceCnt <= 10) endGame = true;\n\n    // now we will evalute board position based on 2 things\n    // 1. piece values\n    // 2. piece postion values.\n\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i] in pieceValue) {\n            // if it is lowercase then it is black piece.\n            // else it is white pieces.\n            if (pieces[i] >= 'a' && pieces[i] <= 'z') {\n                evalution += pieceValue[pieces[i]];\n\n                if (endGame && pieces[i] === 'k') {\n                    evalution += positionWeightBlack['k_end'][curx][cury];\n                } else {\n                    evalution += positionWeightBlack[pieces[i]][curx][cury];\n                }\n            } else {\n                evalution -= pieceValue[pieces[i]];\n\n                if (endGame && pieces[i] === 'k') {\n                    evalution += positionWeightWhite['k_end'][curx][cury];\n                } else {\n                    evalution -= positionWeightWhite[pieces[i].toLowerCase()][curx][cury];\n                }\n            }\n        } else {\n            // if we encounter '/' then it measn that we reached the end of the row.\n            if (pieces[i] === '/') {\n                // go to the next row on chess board.\n                curx++;\n                cury = 0;\n            } else {\n                // if it is number then jump position on board in current row by that number.\n                cury += parseInt(pieces[i]);\n            }\n        }\n    }\n\n    return evalution;\n};\n\nconst minimax = (depth, alpha, beta, maximizingPlayer) => {\n    // if we reach the depth limit or game is over then return then evalution value for the current board position.\n    if (depth === 0 || chess.game_over()) {\n        return [evaluteBoard(!maximizingPlayer), null];\n    }\n\n    // generate all possible moves.\n    const moves = chess.moves({ verbose: true });\n\n    // sort moves randomly to avoid selecting same move again and again.\n    for (let i = moves.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [moves[i], moves[j]] = [moves[j], moves[i]];\n    }\n\n    if (maximizingPlayer) {\n        // if it is the turn of maximizing player then try to pick position with maximum evalution value.\n        let maxEvalution = -INF;\n        let move = null;\n        for (let i = 0; i < moves.length; i++) {\n            chess.move(moves[i]);\n            let res = minimax(depth - 1, alpha, beta, !maximizingPlayer);\n            if (maxEvalution < res[0]) {\n                maxEvalution = res[0];\n                move = moves[i];\n            }\n            alpha = Math.max(alpha, res[0]);\n            chess.undo();\n\n            if (beta <= alpha) {\n                break;\n            }\n        }\n        return [maxEvalution, move];\n    } else {\n        // if it is the turn of minimizing player then try to pick position with minimum evalution value.\n        let minEvalution = INF;\n        let move = null;\n        for (let i = 0; i < moves.length; i++) {\n            chess.move(moves[i]);\n            let res = minimax(depth - 1, alpha, beta, !maximizingPlayer);\n            if (minEvalution > res[0]) {\n                minEvalution = res[0];\n                move = moves[i];\n            }\n            beta = Math.min(beta, res[0]);\n            chess.undo();\n\n            if (beta <= alpha) {\n                break;\n            }\n        }\n        return [minEvalution, move];\n    }\n};\n/* \nold data\ndepth       milliseconds\n  1       9.725000010803342   23.674999989452772   30.530000003636815  11.014999996405095   14.455000011366792 \n  3       118.61499999940861  211.57500000845175   220.89499999128748  486.86500001349486  320.6800000043586   174.93500000273343 950.2199999988079 1114.690000002156  1316.5449999942211  2170.0399999972433  1643.1749999901513  2118.000000002212  232.4499999958789 691.5900000021793 194.4999999977881 .... then most of is around 50ms     \n  4       971.0400000039954   1037.9499999980908   1667.780000003404   2699.159999989206  1992.5700000021607   3732.140000007348  9526.230000003125 5469.129999997676  3829.830000002403   33861.92000001029   3527.0000000018626  9804.919999995036  9804.919999995036 2311.1449999996694 3807.394999996177 3014.884999996866  6488.115000000107 5849.965000001248 38767.55000000412  6834.484999999404  4239.4899999926565  4217.980000001262  6130.514999997104  6226.27499999362   11804.290000000037 \n*/\nexport const GenerateMove = (fen) => {\n    chess = new Chess(fen);\n\n    // depth of minimax.\n    const depth = 3;\n\n    // const t0 = performance.now();\n    const result = minimax(depth, -INF, INF, true);\n    // const t1 = performance.now();\n    // console.log(`Took ${t1 - t0} milliseconds`)\n\n    // result will have 2 values\n    // first one is evalution value\n    // second is the move\n    return result[1];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}