[{"/home/mushrambo/projects/chess-app/frontend/src/index.js":"1","/home/mushrambo/projects/chess-app/frontend/src/App.js":"2","/home/mushrambo/projects/chess-app/frontend/src/reportWebVitals.js":"3","/home/mushrambo/projects/chess-app/frontend/src/components/Header.js":"4","/home/mushrambo/projects/chess-app/frontend/src/components/LandingPage.js":"5","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/Login.js":"6","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/ConfirmationPage.js":"7","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/Register.js":"8","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/NewPassword.js":"9","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/ResetPassword.js":"10","/home/mushrambo/projects/chess-app/frontend/src/components/Game/Game.js":"11","/home/mushrambo/projects/chess-app/frontend/src/components/Game/Computer.js":"12","/home/mushrambo/projects/chess-app/frontend/src/components/Game/LeaderBoard.js":"13","/home/mushrambo/projects/chess-app/frontend/src/components/User/UserProfile.js":"14","/home/mushrambo/projects/chess-app/frontend/src/components/User/Rating.js":"15","/home/mushrambo/projects/chess-app/frontend/src/components/User/UpdateProfile.js":"16","/home/mushrambo/projects/chess-app/frontend/src/context/UserContext.js":"17","/home/mushrambo/projects/chess-app/frontend/src/components/User/MatchHistory.js":"18","/home/mushrambo/projects/chess-app/frontend/src/components/Utils/Config.js":"19","/home/mushrambo/projects/chess-app/frontend/src/components/Home.js":"20","/home/mushrambo/projects/chess-app/frontend/src/components/Utils/GenerateMove.js":"21"},{"size":510,"mtime":1699612019303,"results":"22","hashOfConfig":"23"},{"size":4127,"mtime":1700314243070,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1699612019303,"results":"25","hashOfConfig":"23"},{"size":2236,"mtime":1699612019303,"results":"26","hashOfConfig":"23"},{"size":2572,"mtime":1699612019303,"results":"27","hashOfConfig":"23"},{"size":4958,"mtime":1699612019303,"results":"28","hashOfConfig":"23"},{"size":771,"mtime":1699612019303,"results":"29","hashOfConfig":"23"},{"size":4435,"mtime":1699612019303,"results":"30","hashOfConfig":"23"},{"size":4237,"mtime":1699612019303,"results":"31","hashOfConfig":"23"},{"size":2555,"mtime":1699612019303,"results":"32","hashOfConfig":"23"},{"size":17988,"mtime":1699612019303,"results":"33","hashOfConfig":"23"},{"size":11299,"mtime":1699612019303,"results":"34","hashOfConfig":"23"},{"size":1913,"mtime":1699612019303,"results":"35","hashOfConfig":"23"},{"size":5727,"mtime":1699612019303,"results":"36","hashOfConfig":"23"},{"size":5709,"mtime":1699612019303,"results":"37","hashOfConfig":"23"},{"size":5514,"mtime":1699612019303,"results":"38","hashOfConfig":"23"},{"size":110,"mtime":1699612019303,"results":"39","hashOfConfig":"23"},{"size":5570,"mtime":1699612019303,"results":"40","hashOfConfig":"23"},{"size":168,"mtime":1700314227320,"results":"41","hashOfConfig":"23"},{"size":3314,"mtime":1699612019303,"results":"42","hashOfConfig":"23"},{"size":9085,"mtime":1699612019303,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"dh3cr1",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"47"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"47"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"47"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"47"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"/home/mushrambo/projects/chess-app/frontend/src/index.js",[],[],[],"/home/mushrambo/projects/chess-app/frontend/src/App.js",["118"],[],"import { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Switch, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Header from './components/Header';\nimport LandingPage from './components/LandingPage';\nimport Login from './components/Auth/Login';\nimport ConfirmationPage from './components/Auth/ConfirmationPage';\nimport Register from './components/Auth/Register';\nimport NewPassword from './components/Auth/NewPassword';\nimport ResetPassword from './components/Auth/ResetPassword';\nimport Game from './components/Game/Game';\nimport Computer from './components/Game/Computer';\nimport LeaderBoard from './components/Game/LeaderBoard';\nimport UserProfile from './components/User/UserProfile';\nimport MatchHistory from './components/User/MatchHistory';\nimport UpdateProfile from './components/User/UpdateProfile';\nimport Rating from './components/User/Rating';\nimport UserContext from './context/UserContext';\nimport { Spinner } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\nconst { SERVER_URL } = require('./components/Utils/Config');\n\n\nfunction App() {\n    const [user, setUser] = useState({\n        isValid: false,\n        id: undefined,\n        username: undefined,\n        rating: undefined,\n    });\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const checkLoggingStatus = async () => {\n            try {\n                const token = localStorage.getItem('token');\n                const response = await axios.post(`${SERVER_URL}/u/verifyToken`, { token: token });\n                if (response.data.isValid) {\n                    setUser((user) => ({\n                        isValid: response.data.isValid,\n                        id: response.data.id,\n                        username: response.data.username,\n                        rating: response.data.rating,\n                    }));\n                } else {\n                    // JWT is not valid, remove it from the browser's storage\n                    localStorage.removeItem('token');\n                }\n                setIsLoading(false);\n            } catch (error) {\n                setIsLoading(false);\n                localStorage.removeItem('token');\n            }\n        };\n        checkLoggingStatus();\n    }, []);\n\n    // if user has logged in or not is not verified yet then show loading spinner.\n    if (isLoading) {\n        return (\n            <div data-testid=\"spinner\" className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    return (\n        <div id='app-container'>\n            <BrowserRouter>\n                <UserContext.Provider value={{ user: user, setUser: setUser }}>\n                    <Header />\n                    <Switch>\n                        <Route component={LandingPage} exact path='/' />\n                        <Route component={Login} exact path='/login' />\n                        <Route component={Register} exact path='/register' />\n                        <Route component={ResetPassword} exact path='/resetPassword' />\n                        <Route component={NewPassword} exact path='/reset/:resetToken' />\n                        <Route component={LeaderBoard} exact path='/g/leaderboard' />\n                        <Route component={Computer} exact path='/g/computer' />\n                        <Route component={Game} exact path='/g/:gameId' />\n                        <Route component={UpdateProfile} exact path='/u/updateProfile' />\n                        <Route component={UserProfile} exact path='/u/:userId' />\n                        <Route component={MatchHistory} exact path='/u/:userId/matches' />\n                        <Route component={Rating} exact path='/u/:userId/rating' />\n                        <Route component={ConfirmationPage} exact path='/u/confirmation/:token' />\n                        <Route component={() => \"404 Page not found\"} path=\"*\" />\n                    </Switch>\n                </UserContext.Provider>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","/home/mushrambo/projects/chess-app/frontend/src/reportWebVitals.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Header.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/LandingPage.js",["119"],[],"import React, { useContext, useState, useEffect, useRef } from 'react';\nimport Home from './Home';\nimport UserContext from '../context/UserContext';\nimport { useHistory } from 'react-router-dom';\nimport ChessBG from '../assets/chess_bg_1.jpg';\nfunction LandingPage() {\n    const [message, setMessage] = useState('');\n    const [cursor, setCursor] = useState('cursor');\n    const User = useContext(UserContext);\n   \n    let index = 0;\n    const text = 'Chess';\n\n    const history = useHistory();\n    const messageRef = useRef(message);\n    const cursorRef = useRef(cursor);\n\n    useEffect(() => {\n        messageRef.current = message;\n        cursorRef.current = cursor;\n    });\n\n    useEffect(() => {\n        // blink cursor every interval by changing the classname\n        let cursor = setInterval(() => {\n            if (cursorRef.current === '') {\n                setCursor('cursor');\n            } else {\n                setCursor('');\n            }\n        }, 400);\n\n        // animating \"Chess\" text\n        // add new character to current text\n        let typing = setInterval(() => {\n            setMessage(messageRef.current + text[index]);\n            index++;\n            if (index === text.length) {\n                clearInterval(typing);\n            }\n        }, 150);\n\n        return () => {\n            clearInterval(cursor);\n            clearInterval(typing);\n        };\n    }, []);\n\n    return User.user.isValid ? (\n        <Home />\n    ) : (\n        <div id='landing-page-container' style={{ backgroundImage: `url(${ChessBG})` }}>\n            <div id='landing-page-title'>\n                {message}\n                <span id={`${cursor}`}>|</span>\n                <div style={{ fontSize: '28px' }}>\n                    <div>\n                        <button className='btn btn-light' onClick={() => history.push('/register')} style={{ fontSize: '18px' }}>\n                            Register\n                        </button>{' '}\n                        to play chess with your friends \n                    </div>\n                    <div>\n                        Or{' '}\n                        <button\n                            className='btn btn-success'\n                            onClick={() => history.push('/g/computer')}\n                            style={{ fontSize: '18px' }}>\n                            Play against Computer\n                        </button>{' '}\n                    </div>\n                    <div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LandingPage;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/Login.js",["120"],[],"import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\nimport ChessBG from '../../assets/chess_bg_1.jpg';\nconst { SERVER_URL } = require('../Utils/Config');\n\n\nfunction Login(props) {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [message, setMessage] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    const history = useHistory();\n    const User = useContext(UserContext);\n\n    useEffect(() => {\n        // if it is redirected from different component then it might have also included some error message.\n        if (props.location.state && props.location.state.message) {\n            setError(props.location.state.message);\n        }\n        // when user confirms email address. they are redirected to login page with params indicating that user has confirmed email address.\n        if (new URLSearchParams(props.location.search).get('EmailConfirmedRedirect') === 'true') {\n            setMessage('Your Email address is confirmed successfully. Now login to continue');\n        }\n        // when user confirms email address. they are redirected to login page with params indicating that user has confirmed email address.\n        if (new URLSearchParams(props.location.search).get('EmailConfirmedRedirect') === 'false') {\n            setMessage('error in email/token confirmation');\n        }\n    }, []);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        setIsLoading(true);\n        try {\n            const res = await axios.post(`${SERVER_URL}/u/login`, { email: email, password: password });\n\n            setIsLoading(false);\n            // set the user data in UserContext\n            User.setUser({\n                id: res.data.id,\n                username: res.data.username,\n                rating: res.data.rating,\n                isValid: true,\n            });\n            localStorage.setItem('token', res.data.token);\n\n            // if previously user was redirected from some component to login then after login redirect back to original component.\n            // else redirect to home apge\n            if (props.location.state && props.location.state.from) {\n                history.push(props.location.state.from);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            if (error.response && error.response.data) setError(error.response.data.error);\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div style={{ backgroundImage: `url(${ChessBG})`, height: '100%' }}>\n            <div className='card col-lg-3 login-form'>\n                {message !== '' && <Alert variant='success'>{message}</Alert>}\n                {error !== '' && <Alert variant='danger'>{error}</Alert>}\n\n                <form onSubmit={handleSubmit}>\n                    <div className='form-group'>\n                        <label htmlFor='email'>Email Address</label>\n                        <input\n                            type='email'\n                            className='form-control'\n                            id='email'\n                            aria-describedby='emailHelp'\n                            placeholder='Enter Email'\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <label htmlFor='password'>Password</label>\n                        <input\n                            type='password'\n                            className='form-control'\n                            id='password'\n                            placeholder='Password'\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </div>\n                    <div>\n                        <Link to='/resetPassword'>Forgot password?</Link>\n                    </div>\n                    <div className='LoginButton'>\n                        <div>\n                            <button type='submit' className='btn btn-primary' disabled={isLoading}>\n                                Login\n                            </button>\n                        </div>\n                        {isLoading && (\n                            <div className='LoginSpinner'>\n                                <Spinner animation='border' variant='primary' />\n                            </div>\n                        )}\n                    </div>\n                    <div>\n                        Don't have an account? <Link to='/register'>Register Now</Link>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Login;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/ConfirmationPage.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Auth/Register.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Auth/NewPassword.js",["121"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport ChessBG from '../../assets/chess_bg_1.jpg';\nconst { SERVER_URL } = require('../Utils/Config');\n\nfunction NewPassword(props) {\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [error, setError] = useState('');\n    const [message, setMessage] = useState('');\n    const [isVerifyingData, setIsVerifyingData] = useState(true);\n    const [isUrlValid, setIsUrlValid] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const verifyToken = async () => {\n            try {\n                // check if reset token is valid(expired or wrong token) or not.\n                await axios.post(`${SERVER_URL}/u/confirmResetToken`, {resetToken: props.match.params.resetToken})      \n                setIsVerifyingData(false);\n                setIsUrlValid(true);\n            } catch (error) {\n                if (error.response && error.response.data)setError(error.response.data.error);\n                setIsVerifyingData(false);\n                setIsUrlValid(false);\n            }\n        }\n        verifyToken();\n    }, [])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsLoading(true);\n        try {\n            await axios.post(`${SERVER_URL}/u/newPassword`, { password: password, confirmPassword: confirmPassword, resetToken: props.match.params.resetToken });\n            setMessage('Your Password has been reset')\n            setError('');\n            setIsLoading(false);\n        } catch (error) {\n            if (error.response && error.response.data)setError(error.response.data.error);\n            setIsLoading(false);\n        }\n    };\n\n    // if reset token is begin verified then show loading spinner\n    if (isVerifyingData) {\n        return (\n            <div className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    // if reset token is not valid then show error message\n    if ( !isUrlValid ) {\n        return (\n            <Alert variant='warning'>{error}</Alert>\n        )\n    } \n\n    return (\n        <div style={{ backgroundImage: `url(${ChessBG})`, height: '100%' }}>\n            <div className='card col-lg-3 login-form'>\n                {error !== '' && <Alert variant='danger'>{error}</Alert>}\n                {message !== '' && <Alert variant='success'>{message}</Alert>}\n                <form onSubmit={handleSubmit}>\n                    <div className='form-group'>\n                        <label htmlFor='password'>Password</label>\n                        <input\n                            type='password'\n                            className='form-control'\n                            id='password'\n                            placeholder='Enter new password'\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <label htmlFor='confirmPassword'>Confirm Password</label>\n                        <input\n                            type='password'\n                            className='form-control'\n                            id='confirmPassword'\n                            placeholder='Enter new password'\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        />\n                    </div>\n                    <div className='LoginButton'>\n                        <div>\n                            <button type='submit' className='btn btn-primary' disabled={isLoading}>\n                                Reset Password\n                            </button>\n                        </div>\n                        {isLoading && (\n                            <div className='LoginSpinner'>\n                                <Spinner animation='border' variant='primary' />\n                            </div>\n                        )}\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default NewPassword;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Auth/ResetPassword.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Game/Game.js",["122"],[],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport Chess from 'chess.js';\nimport Chessboard from 'chessboardjsx';\nimport { SERVER_URL } from '../Utils/Config';\nimport Modal from 'react-bootstrap/Modal';\nimport { Redirect } from 'react-router-dom';\nimport { Alert, Spinner, Table } from 'react-bootstrap';\nimport UserContext from '../../context/UserContext';\nimport chess_move_sound from '../../assets/chess_move_sound.mp3';\n\n\n\n\n// Learn more about what is fen in chess from here.\n// https://www.chess.com/terms/fen-chess\n\n/*\n-first some user creates a game.\n-when someone tries to join game by using game link, first it is checked that game is full or not.\n-if game is not full then user is joined to that game and socket event is fired to other player that opponent has joined.\n-when any player moves the piece, after validating that move another socket event is emitted for the move.\n*/\n\nlet socket = io(SERVER_URL);\n\nfunction Game(props) {\n    const [fen, setFen] = useState(\n        'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n    );\n    const [moves, setMoves] = useState([]);\n    const [turn, setTurn] = useState('');\n    const [playerColor, setPlayerColor] = useState('');\n    const [matchStatus, setMatchStatus] = useState('Ongoing');\n    const [inCheck, setInCheck] = useState('');\n\n    // when game ends a popup is used to show the status(Win, Lose, Draw)\n    const [showPopUp, setShowPopUp] = useState(false);\n\n    const [opponentDetails, setOpponentDetails] = useState({\n        username: '',\n        rating: 0,\n    });\n\n    // when user hovers over a piece on board. to indicate all possible positions, this positions are given different styling.\n    const [squareStyles, setSquareStyles] = useState({});\n    const [redirectToLogin, setRedirectToLogin] = useState(false);\n    const [isLoading, setisLoading] = useState(true);\n    const [isLobbyFull, setIsLobbyFull] = useState(false);\n\n    let chess = new Chess(fen);\n    const User = useContext(UserContext);\n    const gameId = props.match.params.gameId;\n    const signal = axios.CancelToken.source();\n\n    const movesRef = useRef(moves);\n    const turnRef = useRef(turn);\n    const playerColorRef = useRef(playerColor);\n    const isMounted = useRef(true);\n\n    const checkWinStatus = async (lastMoveColor) => {\n        // check if game is ended or not. if ended then determine the winner using who played last move.\n        let winner = '';\n        if (chess.in_draw()) {\n            winner = 'draw';\n        } else if (chess.in_checkmate()) {\n            winner = lastMoveColor;\n        }\n        if (winner !== '') {\n            if (winner === 'd') {\n                setMatchStatus('Game draw');\n            } else if (lastMoveColor === playerColor) {\n                setMatchStatus('You Won');\n            } else {\n                setMatchStatus('You Lose');\n            }\n            setShowPopUp(true);\n            try {\n                await axios.post(\n                    `${SERVER_URL}/g/gameStatus`,\n                    { winner: winner, gameId: gameId },\n                    { cancelToken: signal.token }\n                );\n            } catch (error) {\n                if (axios.isCancel(error)) {\n                    console.error('Error: ', error.message);\n                }\n            }\n        }\n    };\n    const updateScroll = () => {\n        // if moves history doesn't fit in window then scroll down to latest move.\n        var element = document.getElementById('moves-table-container');\n        if (element) element.scrollTop = element.scrollHeight;\n    };\n\n    const fetchOpponentDetails = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const res = await axios.get(`${SERVER_URL}/g/getOpponentDetails`, {\n                headers: { token: token },\n                params: { gameId: gameId, color: playerColorRef.current },\n            });\n            if (res.data.bothPlayerJoined) {\n                setOpponentDetails({\n                    username: res.data.username,\n                    rating: res.data.rating,\n                });\n            }\n        } catch (error) {\n            if (axios.isCancel(error)) {\n                console.error('Error: ', error.message);\n            }\n        }\n    };\n\n    useEffect(() => {\n        // if new move is added then scroll down to latest move.\n        if (movesRef.current.length !== moves.length) updateScroll();\n        turnRef.current = turn;\n        playerColorRef.current = playerColor;\n        movesRef.current = moves;\n    });\n\n    useEffect(() => {\n        const JoinGame = async () => {\n            if (!socket) {\n                socket = io(SERVER_URL);\n            }\n            try {\n                // CHecking if user has logged in or not.\n                // if not then redirect user to login page.\n                const token = localStorage.getItem('token');\n                const user = await axios.post(`${SERVER_URL}/u/verifyToken`, {\n                    token: token,\n                });\n                if (!user.data.isValid) {\n                    setRedirectToLogin(true);\n                    localStorage.removeItem('token');\n                    return;\n                }\n\n                // now retrive the current game data.\n                const game = await axios.post(\n                    `${SERVER_URL}/g/join`,\n                    { gameId: gameId, userId: user.data.id },\n                    { cancelToken: signal.token }\n                );\n\n                if (isMounted.current) {\n                    // setting up the chess configs\n                    chess.load(game.data.fen);\n                    setFen(game.data.fen);\n                    setMoves(game.data.moves);\n                    setInCheck(chess.in_check() && !chess.in_checkmate());\n                    setPlayerColor(game.data.playerColor);\n\n                    // get current player's turn from fen notation.\n                    game.data.fen.split(' ')[1] === 'w'\n                        ? setTurn('white')\n                        : setTurn('black');\n                    // if match is over then find the game status.\n                    if (game.data.winner !== '') {\n                        if (game.data.winner === 'draw') {\n                            setMatchStatus('Game Draw');\n                        } else if (game.data.winner === game.data.playerColor) {\n                            setMatchStatus('You Won');\n                        } else {\n                            setMatchStatus('You lose');\n                        }\n                    }\n                    await fetchOpponentDetails();\n                    setisLoading(false);\n\n                    // make the socket connection/\n                    socket.emit('join', { gameId: gameId });\n                    socket.on('receiveMove', (data) => {\n                        // check if this move is of opponents or not.\n                        if (data.playerColor !== playerColorRef.current) {\n                            const audioEl =\n                                document.getElementsByClassName(\n                                    'audio-element'\n                                )[0];\n                            audioEl.play();\n\n                            chess.load(data.fen);\n                            checkWinStatus(data.playerColor);\n\n                            if (isMounted.current) {\n                                setFen(chess.fen());\n                                setMoves([\n                                    ...movesRef.current,\n                                    { from: data.move.from, to: data.move.to },\n                                ]);\n                                setInCheck(\n                                    chess.in_check() && !chess.in_checkmate()\n                                );\n                                setTurn(playerColorRef.current);\n                            }\n                        }\n                    });\n                    // whenever opponent joins set the  opponentDetail state.\n                    socket.on('userJoined', async () => {\n                        fetchOpponentDetails();\n                    });\n                }\n            } catch (error) {\n                if (axios.isCancel(error))\n                    console.error('Error: ', error.message);\n                else setIsLobbyFull(true);\n                setisLoading(false);\n            }\n        };\n        JoinGame();\n\n        return () => {\n            isMounted.current = false;\n            if (socket) {\n                socket.close();\n                socket = null;\n            }\n            signal.cancel('Api calls are being cancelled');\n        };\n    }, []);\n\n\n\n    const handleMove = async (move) => {\n        // if user tries to move some piece but it is not that user's turn then return.\n        if (turn !== playerColor) {\n            return;\n        }\n        if (chess.move(move)) {\n            // plat the chess move sound.\n            const audioEl = document.getElementsByClassName('audio-element')[0];\n            audioEl.play();\n\n            const newFen = chess.fen();\n            socket.emit('postMove', {\n                gameId,\n                playerColor,\n                move,\n                fen: newFen,\n            });\n\n            checkWinStatus(playerColor);\n\n            if (isMounted.current) {\n                setFen(newFen);\n                setMoves([...moves, { from: move.from, to: move.to }]);\n                setInCheck(chess.in_check() && !chess.in_checkmate());\n                // get the player's turn from fen notation.\n                if (newFen.split(' ')[1] === 'w') {\n                    setTurn('white');\n                } else {\n                    setTurn('black');\n                }\n            }\n\n            try {\n                await axios.post(\n                    `${SERVER_URL}/g/postMove`,\n                    { gameId: gameId, move: move, fen: newFen },\n                    { cancelToken: signal.token }\n                );\n            } catch (error) {\n                if (axios.isCancel(error)) {\n                    console.error('Error: ', error.message);\n                }\n            }\n        }\n    };\n\n    const onMouseOverSquare = (square) => {\n        // when user puts mouse over some square then generate possible movement from that square and display it.\n        const moves = chess.moves({ square: square, verbose: true });\n        const styling = {};\n        for (let i = 0; i < moves.length; i++) {\n            styling[moves[i].to] = {\n                background:\n                    'radial-gradient(circle, #b5e48c 38%, transparent 40%)',\n                borderRadius: '50%',\n            };\n        }\n        setSquareStyles(styling);\n    };\n    const onMouseOutSquare = () => {\n        setSquareStyles({});\n    };\n\n    // if user is not logged in then redirect to login page.\n    if (redirectToLogin) {\n        return (\n            <Redirect\n                to={{\n                    pathname: '/login',\n                    state: {\n                        from: props.location.pathname,\n                        message: 'Login to play the game',\n                    },\n                }}\n            />\n        );\n    }\n    if (isLoading) {\n        return (\n            <div className=\"Spinner\">\n                <Spinner animation=\"border\" variant=\"primary\" />\n            </div>\n        );\n    }\n    // if both player joined already in the game then displat lobby full message.\n    if (isLobbyFull) {\n        return (\n            <Alert variant=\"warning\">\n                Lobby is already full and game is started. Create new game to\n                play with friends\n            </Alert>\n        );\n    }\n\n    return (\n        <div id=\"GameContainer\">\n            <Modal\n                show={showPopUp}\n                backdrop=\"static\"\n                onHide={() => setShowPopUp(false)}\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>{matchStatus}</Modal.Title>\n                </Modal.Header>\n            </Modal>\n\n            <div id=\"wrapper\">\n                <div id=\"left-sidebar-wrapper\">\n                    <Table striped bordered hover variant=\"dark\">\n                        <tbody>\n                            {inCheck ? (\n                                <tr>\n                                    <td colSpan=\"2\" id=\"in-check-text\">\n                                        {turn.charAt(0).toUpperCase() +\n                                            turn.slice(1)}{' '}\n                                        in Check\n                                    </td>\n                                </tr>\n                            ) : (\n                                <></>\n                            )}\n                            <tr>\n                                <td>Turn</td>\n                                <td>{turn}</td>\n                            </tr>\n                            <tr>\n                                <td>Your Color</td>\n                                <td>{playerColor}</td>\n                            </tr>\n                            <tr>\n                                <td>Status</td>\n                                {matchStatus === 'Ongoing' ? (\n                                    <td>{matchStatus}</td>\n                                ) : matchStatus === 'You Won' ? (\n                                    <td id=\"win-status\">You Won</td>\n                                ) : (\n                                    <td id=\"lose-status\">You Lose</td>\n                                )}\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <div id=\"game-link-container\">\n                        <h6>Send this game id to play with friends</h6>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"game-link\"\n                            value={gameId}\n                            disabled={true}\n                        />\n                    </div>\n                </div>\n\n                <div id=\"chessboard-wrapper\">\n                    <div id=\"player-information-opponent\">\n                        {opponentDetails.username !== '' ? (\n                            <>\n                                <div>Username: {opponentDetails.username}</div>\n                                <div>Rating: {opponentDetails.rating}</div>\n                            </>\n                        ) : (\n                            <div>Waiting for opponent to Join...</div>\n                        )}\n                    </div>\n                    <div id=\"chessboard\">\n                        <Chessboard\n                            width={'550'}\n                            position={fen}\n                            onDrop={(move) => {\n                                handleMove({\n                                    from: move.sourceSquare,\n                                    to: move.targetSquare,\n                                    promotion: 'q',\n                                });\n                            }}\n                            orientation={playerColor}\n                            onMouseOverSquare={onMouseOverSquare}\n                            onMouseOutSquare={onMouseOutSquare}\n                            squareStyles={squareStyles}\n                            lightSquareStyle={{ backgroundColor: 'AliceBlue' }}\n                            darkSquareStyle={{ backgroundColor: '#007f5f' }}\n                            // darkSquareStyle={{ backgroundColor: \"#4a4e69\" }}\n                            // darkSquareStyle={{ backgroundColor: \"CornFlowerBlue\" }}\n                        />\n                    </div>\n                    <div id=\"player-information-you\">\n                        <div>Username: {User.user.username}</div>\n                        <div>Rating: {User.user.rating}</div>\n                    </div>\n                </div>\n\n                <div id=\"right-sidebar-wrapper\">\n                    <div id=\"moves-table-container\">\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th colSpan=\"2\" id=\"moves-header\">\n                                        Moves\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {moves.map((move, index) => {\n                                    if (index % 2 === 0) {\n                                        return (\n                                            <tr key={index}>\n                                                <td className=\"move-color-indicator-white\"></td>\n                                                <td className=\"move-text\">{`${move.from} -> ${move.to}`}</td>\n                                            </tr>\n                                        );\n                                    } else {\n                                        return (\n                                            <tr key={index}>\n                                                <td className=\"move-color-indicator-black\"></td>\n                                                <td className=\"move-text\">{`${move.from} -> ${move.to}`}</td>\n                                            </tr>\n                                        );\n                                    }\n                                })}\n                            </tbody>\n                        </Table>\n                    </div>\n                </div>\n            </div>\n            <audio className=\"audio-element\">\n                <source type=\"audio/mp3\" src={chess_move_sound}></source>\n            </audio>\n        </div>\n    );\n}\n\nexport default Game;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Game/Computer.js",["123"],[],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport axios from 'axios';\nimport Chess from 'chess.js';\nimport Chessboard from 'chessboardjsx';\nimport { Spinner, Table, Modal } from 'react-bootstrap';\nimport UserContext from '../../context/UserContext';\nimport { GenerateMove } from '../Utils/GenerateMove';\n\nimport chess_move_sound from '../../assets/chess_move_sound.mp3';\n\n\n\n/*\nfor the generation of computer's move minimax algorithm is used. it is further optimized using alpha beta pruning.\n*/\n\n\n\n\nfunction Computer() {\n    const [fen, setFen] = useState('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n    const [moves, setMoves] = useState([]);\n    const [playerColor, setPlayerColor] = useState('');\n    const [turn, setTurn] = useState('');\n    const [matchStatus, setMatchStatus] = useState('Ongoing');\n    const [inCheck, setInCheck] = useState('');\n    const [showPopUp, setShowPopUp] = useState(false);\n    const [squareStyles, setSquareStyles] = useState({})\n\n    const [isLoading, setisLoading] = useState(true);\n\n    let chess = new Chess(fen);\n    const signal = axios.CancelToken.source();\n    const User = useContext(UserContext);\n\n    const movesRef = useRef(moves);\n    const turnRef = useRef(turn);\n    const playerColorRef = useRef(playerColor);\n    \n    const isMounted = useRef(true);\n    \n\n    const checkWinStatus = async (lastMoveColor) => {\n        // check if game is ended or not. if ended then determine the winner using who played last move.\n        let winner = '';\n        if (chess.in_draw()) {\n            winner = 'draw';\n        } else if (chess.in_checkmate()) {\n            winner = lastMoveColor;\n        }\n        if (winner !== '') {\n            if (winner === 'draw') {\n                setMatchStatus('Game draw');\n            } else if (lastMoveColor === playerColor) {\n                setMatchStatus('You Won');\n            } else {\n                setMatchStatus('You Lose')\n            }\n            setShowPopUp(true);\n        }\n    };\n\n\n    const updateScroll = () => {\n        // if moves history doesn't fit in window then scroll down to latest move.\n        var element = document.getElementById(\"moves-table-container\");\n        if (element)\n            element.scrollTop = element.scrollHeight;\n    }\n    useEffect(() => {\n        // if new move is added then scroll down to latest move.\n        if (movesRef.current.length !== moves.length)\n            updateScroll();\n        turnRef.current = turn;\n        playerColorRef.current = playerColor;\n        movesRef.current = moves;\n    });\n\n    useEffect(() => {\n        const JoinGame = async () => {\n            try {\n                // user will play white and computer will play black.\n                setTurn('white');\n                setPlayerColor('white');\n                setisLoading(false);\n            } catch (error) {\n                if (axios.isCancel(error)) {\n                    console.error('Error: ', error.message);\n                } else {\n                    console.log(error.response.data.error)\n                }\n                setisLoading(false);\n            }\n        };\n        JoinGame();\n        \n        return () => {\n            isMounted.current = false;\n            signal.cancel('Api calls are being cancelled');\n        };\n    }, []);\n\n    const handleMove = async (move) => {\n        // if user tries to move some piece but it is not user's turn then return.\n        if (turn !== playerColor) {\n            return;\n        }\n        if (chess.move(move)) {\n            \n            // play chess move sound.\n            const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n            audioEl.play();\n\n            const newFen = chess.fen();\n            checkWinStatus(playerColor);\n\n            if (isMounted.current) {\n                // update all the states.\n                setFen(newFen);\n                setMoves([...movesRef.current, {from: move.from, to: move.to}]);\n                setInCheck(chess.in_check() && !chess.in_checkmate());\n                if (newFen.split(' ')[1] === 'w') {\n                    setTurn('white');\n                } else {\n                    setTurn('black');\n                }\n            }\n\n            if (chess.in_draw() || chess.in_checkmate())\n                return ;\n\n            setTimeout(() => {\n                // playing random moves\n                // const generatedMoves = chess.moves({ verbose: true });\n                // const index = parseInt(Math.random() * (generatedMoves.length - 1));\n                // move = generatedMoves[index];\n\n\n                // generate move using minimax and alpha beta pruning.\n                move = GenerateMove(chess.fen());\n                chess.move(move);\n\n                \n                setFen(chess.fen());\n                setMoves([...movesRef.current, {from: move.from, to: move.to}]);\n                setInCheck(chess.in_check() && !chess.in_checkmate());\n                setTurn('white');\n                checkWinStatus('black')\n                \n                setTimeout(() => {\n                    const audioEl2 = document.getElementsByClassName(\"audio-element2\")[0]\n                    audioEl2.play();\n                }, 300)\n            }, 50)\n        }\n    };\n\n    const onMouseOverSquare = (square) => {\n        // when user puts mouse over some square then generate possible movement from that square.\n        const moves = chess.moves({ square: square, verbose: true})\n        const styling = {}\n        for (let i = 0; i < moves.length; i++) {\n            styling[moves[i].to] = {\n                background:\"radial-gradient(circle, #b5e48c 38%, transparent 40%)\",\n                borderRadius: \"50%\"\n            }\n        }\n        setSquareStyles(styling)\n    }\n    const onMouseOutSquare = () => {\n        setSquareStyles({})\n    }\n\n    \n    if (isLoading) {\n        return <div className=\"Spinner\" >\n            <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n    }\n\n    return (\n        <div id=\"GameContainer\">\n            \n            {/* after game ends this modal will show game status to the user */}\n            <Modal show={showPopUp} backdrop=\"static\" onHide={() => setShowPopUp(false)} keyboard={false} >\n                <Modal.Header closeButton>\n                    <Modal.Title>{matchStatus}</Modal.Title>\n                </Modal.Header>\n            </Modal>\n\n\n            <div id=\"wrapper\">\n                <div id=\"left-sidebar-wrapper\">\n                    <Table striped bordered hover variant=\"dark\">\n                        <tbody>\n                            {inCheck && (\n                                <tr>\n                                    <td colSpan=\"2\" id=\"in-check-text\">{turn.charAt(0).toUpperCase() + turn.slice(1)} in Check</td>\n                                </tr>\n                            )}\n                            <tr>\n                                <td>Turn</td>\n                                <td>{turn}</td>\n                            </tr>\n                            <tr>\n                                <td>Your Color</td>\n                                <td>{playerColor}</td>\n                            </tr>\n                            <tr>\n                                <td>Status</td>\n                                {\n                                    matchStatus === 'Ongoing' ? (\n                                        <td>{matchStatus}</td>\n                                    ) : matchStatus === 'You Won' ? (\n                                        <td id=\"win-status\">You Won</td>\n                                    ) : (\n                                        <td id=\"lose-status\">You Lose</td>\n                                    )\n                                }\n                            </tr>\n                        </tbody>\n                    </Table>\n                </div>\n\n                <div id=\"chessboard-wrapper\">\n                    <div id=\"player-information-opponent\">\n                        <div>Computer</div>\n                        <div>Rating: Unknown</div>\n                    </div>\n\n                    {/* render chessboard with config */}\n                    <div id=\"chessboard\">\n                        <Chessboard\n                            width={'550'}\n                            position={fen}\n                            onDrop={(move) => {\n                                handleMove({\n                                    from: move.sourceSquare,\n                                    to: move.targetSquare,\n                                    promotion: 'q',\n                                });\n                            }}\n                            orientation={playerColor}\n                            onMouseOverSquare={onMouseOverSquare}\n                            onMouseOutSquare={onMouseOutSquare}\n                            squareStyles={squareStyles}\n                            lightSquareStyle={{ backgroundColor: \"AliceBlue\" }}\n                            darkSquareStyle={{ backgroundColor: \"#007f5f\" }}\n                        />\n                    </div>\n                    <div id=\"player-information-you\">\n                        <div>Username: {User.user.username || 'Unknown'}</div>\n                        <div>Rating: {User.user.rating || 'Unknown'}</div>\n                    </div>\n                </div>\n\n                \n                <div id=\"right-sidebar-wrapper\">\n                    <div id=\"moves-table-container\">\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th colSpan=\"2\" id=\"moves-header\" >Moves</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    moves.map((move, index) => {\n                                        if (index % 2 === 0) {\n                                            return <tr key={index}>\n                                                <td className='move-color-indicator-white'></td>\n                                                <td className='move-text'>{`${move.from} -> ${move.to}`}</td>\n                                            </tr>\n                                        } else {\n                                            return <tr key={index}>\n                                                <td className='move-color-indicator-black'></td>\n                                                <td className='move-text'>{`${move.from} -> ${move.to}`}</td>\n                                            </tr>\n                                        }\n                                    })\n                                }\n                            </tbody>\n                        </Table>\n                    </div>  \n                </div>\n            </div>\n\n            <audio className=\"audio-element\">\n                <source type=\"audio/mp3\" src={chess_move_sound}></source>\n            </audio>\n            <audio className=\"audio-element2\">\n                <source type=\"audio/mp3\" src={chess_move_sound}></source>\n            </audio>\n        </div>\n    );\n}\n\nexport default Computer;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Game/LeaderBoard.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/User/UserProfile.js",["124","125","126","127","128","129","130","131"],[],"import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport UserContext from '../../context/UserContext';\nimport ChessBG from '../../assets/chess_bg_1.jpg';\nconst { SERVER_URL } = require('../Utils/Config');\n\nfunction UserProfile(props) {\n    const [user, setUser] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [validUser, setValidUser] = useState(false);\n    const [data, setData] = useState({});\n\n    const User = useContext(UserContext);\n    const userId = props.match.params.userId;\n\n    // user rating graph options.\n    const options = {\n        scales: {\n            xAxes: [\n                {\n                    ticks: {\n                        display: false, //this will remove the x-axis label\n                    },\n                },\n            ],\n        },\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`${SERVER_URL }/u/getUserWithMatches`, { params: { userId: props.match.params.userId } });\n\n                // calcuate the rating frmo match history\n                // starting rating is 1000\n                let rating = 1000;\n                let height = [rating];\n                let matchData = [''];\n\n                for (let i = 0; i < res.data.matches.length; i++) {\n                    // if match has finished then continue becuase it has no effect on rating.\n                    if (res.data.matches[i].winner === '') continue;\n\n                    // get the opponent name to show in rating graph.\n                    let opponent = '';\n                    if (res.data.matches[i].blackPlayer._id == userId) opponent = res.data.matches[i].whitePlayer.username;\n                    else opponent = res.data.matches[i].blackPlayer.username;\n\n                    // if user won this match increament rating by 50 or decreament by 50.\n                    if (res.data.matches[i].winner === 'white') {\n                        if (res.data.matches[i].whitePlayer._id == userId) rating += 50;\n                        else rating -= 50;\n                    } else if (res.data.matches[i].winner === 'black') {\n                        if (res.data.matches[i].blackPlayer._id == userId) rating += 50;\n                        else rating -= 50;\n                    } else if (res.data.matches[i].winner === 'draw') {\n                    }\n\n                    height.push(rating);\n                    // format opponent name and match time and then put it in mactch data.\n                    matchData.push('Vs ' + opponent + '\\n' + res.data.matches[i].createdAt.substr(0, 16).replace('T', ' | '));\n                }\n\n                setData({\n                    labels: matchData,\n                    datasets: [\n                        {\n                            label: 'Rating',\n                            data: height,\n                            backgroundColor: 'rgba(147, 50, 158, 0.4)',\n                            borderColor: 'rgba(255, 0, 92, 0.5)',\n                        },\n                    ],\n                });\n                setUser(res.data);\n                setIsLoading(false);\n                setValidUser(true);\n            } catch (error) {\n                setIsLoading(false);\n            }\n        };\n        fetchData();\n    }, [props.match.params.userId]);\n\n    if (isLoading) {\n        return (\n            <div className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    if (!validUser) {\n        return <Alert variant='warning'>404 User Not Found</Alert>;\n    }\n\n    return (\n        <div className='new-profile-container'>\n            <div>\n                <ul className='nav nav-tabs'>\n                    <li className='nav-item'>\n                        <Link className='nav-link active profile-active-tab' aria-current='page' to={`/u/${userId}`}>\n                            View Profile\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${userId}/matches`}>\n                            Match History\n                        </Link>\n                    </li>\n                    {userId == User.user.id && (\n                        <li className='nav-item'>\n                            <Link className='nav-link' to='/u/updateProfile'>\n                                Update Profile\n                            </Link>\n                        </li>\n                    )}\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${userId}/rating`}>\n                            User Rating\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n\n            <div id='new-profile-sub-container'>\n                <div id='new-profile-user-detail'>\n                    <div id='new-profile-picture-container'>\n                        <img src={ChessBG} alt='user profile pic' />\n                    </div>\n                        <div id='new-profile-username-rating'>\n                        <div id='profile-username' class='new-profile-font'>Username: {user.username}</div>\n                        <div id='profile-rating' class='new-profile-font'>Rating: {user.rating}</div>\n                        <div id='profile-email' class='new-profile-font'>Email: {user.email}</div>     \n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default UserProfile;\n","/home/mushrambo/projects/chess-app/frontend/src/components/User/Rating.js",["132","133","134","135","136"],[],"import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport UserContext from '../../context/UserContext';\nimport ChessBG from '../../assets/chess_bg_1.jpg';\nconst { SERVER_URL } = require('../Utils/Config');\n\nfunction Rating(props) {\n    const [user, setUser] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [validUser, setValidUser] = useState(false);\n    const [data, setData] = useState({});\n\n    const User = useContext(UserContext);\n    const userId = props.match.params.userId;\n\n    // user rating graph options.\n    const options = {\n        scales: {\n            xAxes: [\n                {\n                    ticks: {\n                        display: false, //this will remove the x-axis label\n                    },\n                },\n            ],\n        },\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`${SERVER_URL }/u/getUserWithMatches`, { params: { userId: props.match.params.userId } });\n\n                // calcuate the rating frmo match history\n                // starting rating is 1000\n                let rating = 1000;\n                let height = [rating];\n                let matchData = [''];\n\n                for (let i = 0; i < res.data.matches.length; i++) {\n                    // if match has finished then continue becuase it has no effect on rating.\n                    if (res.data.matches[i].winner === '') continue;\n\n                    // get the opponent name to show in rating graph.\n                    let opponent = '';\n                    if (res.data.matches[i].blackPlayer._id == userId) opponent = res.data.matches[i].whitePlayer.username;\n                    else opponent = res.data.matches[i].blackPlayer.username;\n\n                    // if user won this match increament rating by 50 or decreament by 50.\n                    if (res.data.matches[i].winner === 'white') {\n                        if (res.data.matches[i].whitePlayer._id == userId) rating += 50;\n                        else rating -= 50;\n                    } else if (res.data.matches[i].winner === 'black') {\n                        if (res.data.matches[i].blackPlayer._id == userId) rating += 50;\n                        else rating -= 50;\n                    } else if (res.data.matches[i].winner === 'draw') {\n                    }\n\n                    height.push(rating);\n                    // format opponent name and match time and then put it in mactch data.\n                    matchData.push('Vs ' + opponent + '\\n' + res.data.matches[i].createdAt.substr(0, 16).replace('T', ' | '));\n                }\n\n                setData({\n                    labels: matchData,\n                    datasets: [\n                        {\n                            label: 'Rating',\n                            data: height,\n                            backgroundColor: 'rgba(147, 50, 158, 0.4)',\n                            borderColor: 'rgba(255, 0, 92, 0.5)',\n                        },\n                    ],\n                });\n                setUser(res.data);\n                setIsLoading(false);\n                setValidUser(true);\n            } catch (error) {\n                setIsLoading(false);\n            }\n        };\n        fetchData();\n    }, [props.match.params.userId]);\n\n    if (isLoading) {\n        return (\n            <div className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    if (!validUser) {\n        return <Alert variant='warning'>404 User Not Found</Alert>;\n    }\n\n    return (\n        <div className='profile-container'>\n            <div>\n                <ul className='nav nav-tabs'>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${props.match.params.userId}`}>\n                            View Profile\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${userId}/matches`}>\n                            Match History\n                        </Link>\n                    </li>\n                    {userId == User.user.id && (\n                        <li className='nav-item'>\n                            <Link className='nav-link' to='/u/updateProfile'>\n                                Update Profile\n                            </Link>\n                        </li>\n                    )}\n                    <li className='nav-item'>\n                        <Link className='nav-link active profile-active-tab' aria-current='page' to={`/u/${userId}/rating`}>\n                            User Rating\n                        </Link>\n                    </li>\n                    \n                </ul>\n            </div>\n\n            <div id='profile-sub-container'>\n                <div id='profile-user-detail'>\n                    <div id='profile-picture-container'>\n                        <img src={ChessBG} alt='user profile pic' />\n                    </div>\n                    <div id='profile-username-rating'>\n                        <div id='profile-username'>Username: {user.username}</div>\n                        <div id='profile-rating'>Rating: {user.rating}</div>\n                    </div>\n                </div>\n                <div id='user-graph-container'>\n                    <Line data={data} options={options} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Rating;\n","/home/mushrambo/projects/chess-app/frontend/src/components/User/UpdateProfile.js",["137"],[],"import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\nconst { SERVER_URL } = require('../Utils/Config');\n\nfunction UpdateProfile(props) {\n    const [username, setUsername] = useState();\n    const [email, setEmail] = useState();\n    const [error, setError] = useState('');\n    const [message, setMessage] = useState('');\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [validUser, setValidUser] = useState(false);\n    \n    const User = useContext(UserContext);\n    \n    useEffect(() => {\n        const fetchData = async () => {\n            try {            \n                const token = localStorage.getItem('token');\n                const res = await axios.get(`${SERVER_URL }/u/getUser`, { headers: {token: token}, params: { userId: User.user.id } });\n                setUsername(res.data.username);\n                setEmail(res.data.email);\n                setValidUser(true);\n                setIsLoading(false);\n            } catch (error) {\n                setIsLoading(false);\n            }\n        };\n        fetchData();\n    }, []);\n\n\n    const handleUpdate = async (e) => {\n        e.preventDefault();\n        setIsUpdating(true);\n        try {\n            const token = localStorage.getItem('token');\n            await axios.post(`${SERVER_URL }/u/updateProfile`, {username: username, email:email} ,{headers: {token: token}})\n            setMessage('Updated Successfully');\n            setError('');\n            setIsUpdating(false);\n        } catch (error) {\n            setMessage('');\n            setError('Update Failed. Please try again');\n            setIsUpdating(false);\n        }\n    }\n\n\n\n    if (isLoading) {\n        return (\n            <div className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    // if user has not logged in then redirect to login page.\n    if (!validUser) {\n        return <Redirect to={{\n            pathname: '/login',\n            state: {from: props.location.pathname, message: 'Please Login to continue'}\n        }} />\n    }\n\n    return (\n        <div className='profile-container'>\n            <div>\n                <ul className='nav nav-tabs'>\n                    <li className='nav-item'>\n                        <Link className='nav-link' aria-current='page' to={`/u/${User.user.id}`}>\n                            View Profile\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${User.user.id}/matches`}>\n                            Match History\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link className='nav-link active profile-active-tab' to='/u/updateProfile'>\n                            Update Profile\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${User.user.id}/rating`}>\n                            User Rating\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n\n            <div id='update-profile-container'>\n                <div className='card col-lg-3 login-form'>\n                    {message !== '' && <Alert variant='success'>{message}</Alert>}\n                    {error !== '' && <Alert variant='danger'>{error}</Alert>}\n                    <form onSubmit={handleUpdate}>\n                        \n                        <div className='form-group'>\n                            <label htmlFor='username'>Username</label>\n                            <input\n                                type='text'\n                                className='form-control'\n                                id='username'\n                                placeholder='Enter New Username'\n                                value={username}\n                                onChange={(e) => setUsername(e.target.value)}\n                            />\n                            <label htmlFor='email'>Email</label>\n                            <input\n                                type='text'\n                                className='form-control'\n                                id='email'\n                                placeholder='Enter New Email'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n                        <div className='LoginButton'>\n                            <div>\n                                <button type='submit' className='btn btn-primary' disabled={isLoading}>\n                                    Update\n                                </button>\n                            </div>\n                            {isUpdating && (\n                                <div className='LoginSpinner'>\n                                    <Spinner animation='border' variant='primary' />\n                                </div>\n                            )}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default UpdateProfile;\n","/home/mushrambo/projects/chess-app/frontend/src/context/UserContext.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/User/MatchHistory.js",["138","139","140","141","142","143"],[],"import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Alert, Spinner, Table } from 'react-bootstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\nconst { SERVER_URL } = require('../Utils/Config');\n\nfunction MatchHistory(props) {\n    const [user, setUser] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [validUser, setValidUser] = useState(false);\n\n    const User = useContext(UserContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // get the user id from parameters\n                const userId = props.match.params.userId;\n                const res = await axios.get(`${SERVER_URL }/u/getUserWithMatches`, { params: { userId: userId } });\n                // data will be from first match to latest match. we want latest match first.\n                res.data.matches.reverse();\n                setUser(res.data);\n                setIsLoading(false);\n                setValidUser(true);\n            } catch (error) {\n                setIsLoading(false);\n            }\n        };\n        fetchData();\n    }, [props.match.params.userId]);\n\n    if (isLoading) {\n        return (\n            <div className='Spinner'>\n                <Spinner animation='border' variant='primary' />\n            </div>\n        );\n    }\n\n    if (!validUser) {\n        return <Alert variant='warning'>404 User Not Found</Alert>;\n    }\n\n    return (\n        <div className='profile-container'>\n            <div>\n                <ul className='nav nav-tabs'>\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${props.match.params.userId}`}>\n                            View Profile\n                        </Link>\n                    </li>\n                    <li className='nav-item'>\n                        <Link\n                            className='nav-link active profile-active-tab'\n                            aria-current='page'\n                            to={`/u/${props.match.params.userId}/matches`}>\n                            Match History\n                        </Link>\n                    </li>\n                    {props.match.params.userId == User.user.id && (\n                        <li className='nav-item'>\n                            <Link className='nav-link' to='/u/updateProfile'>\n                                Update Profile\n                            </Link>\n                        </li>\n                    )}\n                    <li className='nav-item'>\n                        <Link className='nav-link' to={`/u/${props.match.params.userId}/rating`}>\n                            User Rating\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n            <div id='match-history-container'>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Index</th>\n                            <th>Opponent</th>\n                            <th>Time</th>\n                            <th>Status</th>\n                            {User.user.id == props.match.params.userId && <th>Goto Match</th>}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {user.matches.map((match, index) => {\n                            let status = '';\n                            if (match.winner === '') {\n                                status = 'Not Finished';\n                            } else if (match.winner === 'draw') {\n                                status = 'draw';\n                            } else {\n                                if (\n                                    (match.winner === 'white' && match.whitePlayer._id == props.match.params.userId) ||\n                                    (match.winner === 'black' && match.blackPlayer._id == props.match.params.userId)\n                                ) {\n                                    status = 'Won';\n                                } else {\n                                    status = 'Lose';\n                                }\n                            }\n                            return (\n                                <tr key={index}>\n                                    <td>{index}</td>\n                                    <td>\n                                        {match.whitePlayer._id == props.match.params.userId\n                                            ? match.blackPlayer.username\n                                            : match.whitePlayer.username}\n                                    </td>\n                                    <td>{match.createdAt.substr(0, 16).replace('T', ' | ')}</td>\n                                    <td>{status}</td>\n                                    {User.user.id == props.match.params.userId && (\n                                        <td>\n                                            <button className='btn btn-dark' onClick={() => history.push(`/g/${match._id}`)}>\n                                                GO\n                                            </button>\n                                        </td>\n                                    )}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    );\n}\n\nexport default MatchHistory;\n","/home/mushrambo/projects/chess-app/frontend/src/components/Utils/Config.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Home.js",[],[],"/home/mushrambo/projects/chess-app/frontend/src/components/Utils/GenerateMove.js",[],[],{"ruleId":"144","severity":1,"message":"145","line":2,"column":40,"nodeType":"146","messageId":"147","endLine":2,"endColumn":49},{"ruleId":"148","severity":1,"message":"149","line":47,"column":8,"nodeType":"150","endLine":47,"endColumn":10,"suggestions":"151"},{"ruleId":"148","severity":1,"message":"152","line":33,"column":8,"nodeType":"150","endLine":33,"endColumn":10,"suggestions":"153"},{"ruleId":"148","severity":1,"message":"154","line":30,"column":8,"nodeType":"150","endLine":30,"endColumn":10,"suggestions":"155"},{"ruleId":"148","severity":1,"message":"156","line":225,"column":8,"nodeType":"150","endLine":225,"endColumn":10,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":101,"column":8,"nodeType":"150","endLine":101,"endColumn":10,"suggestions":"159"},{"ruleId":"144","severity":1,"message":"160","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":14},{"ruleId":"144","severity":1,"message":"161","line":14,"column":12,"nodeType":"146","messageId":"147","endLine":14,"endColumn":16},{"ruleId":"144","severity":1,"message":"162","line":20,"column":11,"nodeType":"146","messageId":"147","endLine":20,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":49,"column":61,"nodeType":"165","messageId":"166","endLine":49,"endColumn":63},{"ruleId":"163","severity":1,"message":"164","line":54,"column":65,"nodeType":"165","messageId":"166","endLine":54,"endColumn":67},{"ruleId":"163","severity":1,"message":"164","line":57,"column":65,"nodeType":"165","messageId":"166","endLine":57,"endColumn":67},{"ruleId":"148","severity":1,"message":"167","line":86,"column":8,"nodeType":"150","endLine":86,"endColumn":35,"suggestions":"168"},{"ruleId":"163","severity":1,"message":"164","line":114,"column":29,"nodeType":"165","messageId":"166","endLine":114,"endColumn":31},{"ruleId":"163","severity":1,"message":"164","line":49,"column":61,"nodeType":"165","messageId":"166","endLine":49,"endColumn":63},{"ruleId":"163","severity":1,"message":"164","line":54,"column":65,"nodeType":"165","messageId":"166","endLine":54,"endColumn":67},{"ruleId":"163","severity":1,"message":"164","line":57,"column":65,"nodeType":"165","messageId":"166","endLine":57,"endColumn":67},{"ruleId":"148","severity":1,"message":"167","line":86,"column":8,"nodeType":"150","endLine":86,"endColumn":35,"suggestions":"169"},{"ruleId":"163","severity":1,"message":"164","line":114,"column":29,"nodeType":"165","messageId":"166","endLine":114,"endColumn":31},{"ruleId":"148","severity":1,"message":"170","line":33,"column":8,"nodeType":"150","endLine":33,"endColumn":10,"suggestions":"171"},{"ruleId":"163","severity":1,"message":"164","line":63,"column":48,"nodeType":"165","messageId":"166","endLine":63,"endColumn":50},{"ruleId":"163","severity":1,"message":"164","line":85,"column":43,"nodeType":"165","messageId":"166","endLine":85,"endColumn":45},{"ruleId":"163","severity":1,"message":"164","line":97,"column":88,"nodeType":"165","messageId":"166","endLine":97,"endColumn":90},{"ruleId":"163","severity":1,"message":"164","line":98,"column":88,"nodeType":"165","messageId":"166","endLine":98,"endColumn":90},{"ruleId":"163","severity":1,"message":"164","line":109,"column":64,"nodeType":"165","messageId":"166","endLine":109,"endColumn":66},{"ruleId":"163","severity":1,"message":"164","line":115,"column":51,"nodeType":"165","messageId":"166","endLine":115,"endColumn":53},"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.","ArrayExpression",["172"],"React Hook useEffect has missing dependencies: 'props.location.search' and 'props.location.state'. Either include them or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'props.match.params.resetToken'. Either include it or remove the dependency array.",["174"],"React Hook useEffect has missing dependencies: 'checkWinStatus', 'chess', 'fetchOpponentDetails', 'gameId', and 'signal'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'signal'. Either include it or remove the dependency array.",["176"],"'Line' is defined but never used.","'data' is assigned a value but never used.","'options' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["177"],["178"],"React Hook useEffect has a missing dependency: 'User.user.id'. Either include it or remove the dependency array.",["179"],{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"190","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [index]",{"range":"195","text":"196"},"Update the dependencies array to be: [props.location.search, props.location.state]",{"range":"197","text":"198"},"Update the dependencies array to be: [props.match.params.resetToken]",{"range":"199","text":"200"},"Update the dependencies array to be: [checkWinStatus, chess, fetchOpponentDetails, gameId, signal]",{"range":"201","text":"202"},"Update the dependencies array to be: [signal]",{"range":"203","text":"204"},"Update the dependencies array to be: [props.match.params.userId, userId]",{"range":"205","text":"206"},{"range":"207","text":"206"},"Update the dependencies array to be: [User.user.id]",{"range":"208","text":"209"},[1394,1396],"[index]",[1619,1621],"[props.location.search, props.location.state]",[1271,1273],"[props.match.params.resetToken]",[8763,8765],"[checkWinStatus, chess, fetchOpponentDetails, gameId, signal]",[3315,3317],"[signal]",[3473,3500],"[props.match.params.userId, userId]",[3468,3495],[1301,1303],"[User.user.id]"]